<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; #>
<# var modelType = (EnvDTE.CodeType)Model.ViewDataType; #>
<# var modelName = modelType.Name; #>
<# var modelNameLower = modelType.Name.ToLower(); #>

<# if(viewDataType != null) { #>
@model IEnumerable<<#= viewDataType.FullName #>>
@using Zcf.Common.MVC.Helpers.DynamicGrid
@using BSG.ADInventory.Resources

<# } #>
@{
    ViewBag.Title = Resource.Management +" "+ Resource.<#= modelName #>;
<# if (!String.IsNullOrEmpty(Model.Layout)) { #>
    Layout = "<#= Model.Layout #>";
<# } #>
}

<h2>@Resource.Management  @Resource.<#= modelName #></h2>

<div id="" class="pannel">
<span style="margin-left: 0; margin-right: 10px;"> 
        <a href="@Url.Action("Create","<#= modelName #>")" class="new-Item" style="text-decoration: none;"> 
            @Resource.Create @Resource.<#= modelName #> @Resource.New 
            <img src="~/Content/images/add.png" /> 
        </a> 
    </span>
</div>

<div id="<#= viewDataType.FullName #>">
    @{ Html.DynamicGrid<<#= viewDataType.FullName #>>(a =>
           a.Id("<#= modelName #>s")
           .DataSource(d =>
               d.BuildTransportObject(t => t.ReadSection(this.Url.Action("GetGridData", "<#= modelName #>"), "post", "application/json; charset=utf-8", "json"))
               .BuildTransportSchema(s => s.Data("Items")
               .Total("TotalItemCount")
               .InitializeSchemaModelSection(m => m.SetIdField("Id")))
               .ServerFiltering(true)
               .ServerPaging(true)
               .ServerSorting(true)
               .ParametersMap("gridCommonManager.parameterMapper")
               .pageSizes(10))
           .selectable(GridSelectionScenario.row)
           .GridField(f => f
<#
List<string> ignoreField = new List<string>(){"CreateTime","CreateUser","LastUpdateTime","LastUpdateUser","CreateUserName","LastUpdateUserName","CreateUserId","LastUpdateUserId"};
List<ModelProperty> properties = GetModelProperties(Model.ViewDataType, true);
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey && !ignoreField.Contains(property.Name)) {
#>
        .AddField("<#= property.Name #>", null, Resource.<#= property.Name #>, null, 50, new FieldAttributesModel() { Class = "<#= property.Name #>" }, null, null, null)
<#
    }
}
#>
        .AddField("", c => c.CommandText(@Resource.Edit)
                    .CommandClickHandler("<#= modelNameLower #>Management.edit<#= modelName #>")
                    .CommandType(GridCommandType.Edit), null, null, 50, new FieldAttributesModel() { Class = "btn-" + GridCommandType.Browse.ToString() + "" }, null, null)
        
		            .AddField("", c => c.CommandText(@Resource.Delete)
                    .CommandClickHandler("<#= modelNameLower #>Management.delete<#= modelName #>")
                    .CommandType(GridCommandType.Delete), null, null, 50, new FieldAttributesModel() { Class = "btn-" + GridCommandType.Browse.ToString() + "" }, null, null)
                    )
           .GridFilter(f => f.Extra(false)
                             .AddOperator(FilterOperators.eq)
                             .AddOperator(FilterOperators.neq)
                             .AddOperator(FilterOperators.startswith)
                             .AddOperator(FilterOperators.endswith)
                             .AddOperator(FilterOperators.contains))
           .Sortable(true)
           .Rtl(true)
           .Language(GridLanguage.Farsi)
           .Pageable(new PagingModel()
           {
               refresh = true,
               pageSizes = true
           }), c => c.AddHttpBaseCommandGenerator(new BSG.ADInventory.Services.DynamicGridDefaultCommandGeneration()));                      
    }
</div>

<script type="text/javascript">
    var gridCommonManager =
        new gridPanelStructureCommon('<#= modelNameLower #>s', 'nav-to-up', '<#= modelNameLower #>s', 'loading');

		var <#= modelNameLower #>Management = new <#= modelNameLower #>ClientScripts();
    $(document).ready(function () {
        $('#grid-row-interactions').hide();

        gridClientManager = new dynamicGridClientManager();
        gridClientManager.initGridManager('<#= modelNameLower #>s');

        gridCommonManager
            .initCrudFrame()
            .initEditPannelProperties('', '', '');
    });

    function <#= modelNameLower #>ClientScripts() {
        var self = this;

        self.edit<#= modelName #> = function (arg) {
            var eventSender = arg;
            var $gridProxy = $('#<#= modelName #>s').data('kendoGrid');
            var $eventSenderRow = $(arg.currentTarget).closest('tr');
            var senderRowData = $gridProxy.dataItem($eventSenderRow);

            location.href = "/<#= modelName #>/Edit/" + senderRowData.Id;
        };

        self.delete<#= modelName #> = function (arg) {
            var eventSender = arg;
            var $gridProxy = $('#<#= modelName #>s').data('kendoGrid');
            var $eventSenderRow = $(arg.currentTarget).closest('tr');
            var senderRowData = $gridProxy.dataItem($eventSenderRow);

            location.href = "/<#= modelName #>/Delete/" + senderRowData.Id;
        };
    }

</script>



<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>