@using BSG.ADInventory.Resources
@{ViewBag.EntityName = "MatOrder";}
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="overlay-wrapper hidden" id="overly-loading-@ViewBag.EntityName">
                    <div class="overlay flex-column"><i class="fad fa-2x fa-spinner fa-spin"></i><div class="pt-2">@Resource.Loading</div></div>
                </div>
                <div class="card card-default">
                    <div class="card-header">
                        <div class="row ">
                            <div class="col-md-6 col-sm-12" id="card-title"><h4 class="card-title w-100 text-lg-left text-xl-left text-md-left text-sm-center"><i class="fad fa-inbox-out fa-lg"></i> @Resource.SentOrders</h4></div>
                            <div class="col-md-6 col-sm-12" id="card-buttons-@ViewBag.EntityName">
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <table id="data-table-@ViewBag.EntityName" class="display nowrap table-hover table-striped">
                            <thead>
                                <tr>
                                    <th>@Resource.Proceedings</th>
                                    <th>@Html.DisplayName(Resource.Id)</th>
                                    <th>@Html.DisplayName(Resource.Priority)</th>
                                    <th>@Html.DisplayName(Resource.Project)</th>
                                    <th>@Html.DisplayName(Resource.Status)</th>
                                    <th>@Html.DisplayName(Resource.RequestUser)</th>
                                    <th>@Html.DisplayName(Resource.RequiredDate)</th>
                                    <th>@Html.DisplayName(Resource.RequestTime)</th>
                                    <th>@Html.DisplayName(Resource.MatItemCount)</th>                                    
                                    <th>@Html.DisplayName(Resource.ConfirmUser)</th>
                                    <th>@Html.DisplayName(Resource.ConfirmTime)</th>                                    
                                </tr>
                            </thead>

                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<script type="text/javascript">
    var config = {
        entity: '@ViewBag.EntityName',
        entityParentId:'',
        entityPostfix: '',
        entityTitle: '@Resource.Order',
        modalSize: 'modal-xl',
        customCrudAction: '',
        sAjaxSource:'/MatOrder/GetDataTableFilteredList?type=1',
        columns: [
            {
                data: 'Id',
                render: function (data, type, row, meta) {
                    console.log(row.ConfirmStatus)
                    return '<div class="dropdown">' +
                        '<button type="button" class="btn btn-default dropdown-toggle text-center" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' +
                        '<span class="fas fa-ellipsis-h fa-sm"></span>' +
                        '</button>' +
                        '<ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">' +
                        (row.ConfirmStatus == 0 ?'<li><a class="dropdown-item" href="#" onclick="crudAction(\'' + '@ViewBag.EntityName' + '\',\'' + '@ViewBag.EntityName' + '/CrudAction' + '\',' + data + ',\'@Resource.Edit @Resource.Order\' , \'modal-xl\')" > <i class="fal fa-edit fa-md"></i> @Resource.Edit</a></li>':'') +
                        '<li><a class="dropdown-item" href="#" onclick="MatOrderPreview(' + data + ')"> <i class="fal fa-file-circle-check fa-md"></i> @Resource.Show @Resource.Details</a></li>' +
                        (row.ConfirmStatus != 0 ?'<li><a class="dropdown-item" href="#" onclick="ArchiveRequest(' + data + ')" > <i class="fal fa-books fa-md"></i> @Resource.Archive @Resource.Order</a></li> ':'') +
                        (row.ConfirmStatus == 0 ?'<li><a class="dropdown-item" href="#" onclick="DeleteItem(' + data + ',\'' + '@ViewBag.EntityName' + '\',\'' + '@ViewBag.EntityName' + '\')"><i class="fal fa-trash-alt fa-md"></i> @Resource.Delete</a></li>':'') +
                        '</ul>' +
                        '</div>'

                }
                , class: 'action-col'
            },
            { data: 'Id' },
                 { data: 'PriorityTitle' },
                { data: 'ProjectTitle' },
                {
                    data: 'ConfirmStatus',
                    render: function (data, type, full, meta) {
                        switch (data) {
                            case 0: return '<span class="fad fa-spinner fa-spin fa-lg"></span> @Resource.Waiting';
                            case 1: return '<span class="fas fa-check fa-lg text-success"></span> @Resource.Confirmed';
                            case 2: return '<span class="fas fa-times fa-lg text-danger"></span> @Resource.Rejected';
                            default : return '';
                                break;
                        }
                    }
            },
            {data:'CreateUserInfo'},
                 {
                     data: 'Id',
                     render: function (data, type, row, meta) {
                         var reqDate = new Date(parseInt(row.RequiredDate.substr(6)));
                         var now = new Date();
                         var diff = Math.round(new Date(reqDate - now) / (1000 * 60 * 60 * 24));

                         if (diff <= 7) {
                             return '<span class="text-danger text-bold fa-beat-fade">' + reqDate.toLocaleDateString('fa-IR') + '</span>';
                         }
                         return '<span>' + reqDate.toLocaleDateString('fa-IR') + '</span>';
                     }
                 },
                 {
                     data: 'CreateTime',
                     className: 'readonly not-allowed',
                     render: function (data, type, full) {
                         if (data != null) {
                             var dtStart = new Date(parseInt(data.substr(6)));
                             return dtStart.toLocaleString('fa-IR');
                         } else {
                             return "";
                         }
                     }
                 },
                 { data: 'MatItemCount' },
                 { data: 'ConfirmUserInfo' },
                 {
                     data: 'ConfirmTime',
                     className: 'readonly not-allowed',
                     render: function (data, type, full) {
                         if (data != null) {
                             var dtStart = new Date(parseInt(data.substr(6)));
                             return dtStart.toLocaleString('fa-IR');
                         } else {
                             return "";
                         }
                     }
                 },

        ],
        columnDefs: [
            { "width": "50px", "targets": 0 },
            { "width": "50px", "targets": 1 }
        ]
    };
    initializeDataTable(config);
</script>




