@using BSG.ADInventory.Resources
@model IEnumerable<BSG.ADInventory.Entities.MatGroup>
@{
    ViewBag.EntityName = "MatGroup";
ViewBag.EntityNameTrn = "MatGroupTrn";
}
@{
    var doJsPGTreeOperationUrl = Url.Action(actionName: "DoJsTreeOperation", controllerName: "MatGroup");
    var getPGTreeJsonUrl = Url.Action(actionName: "GetTreeJson", controllerName: "MatGroup");
}
<link href="~/Content/plugins/jstree/dist/themes/default/style.css" rel="stylesheet" />
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card card-default">
                    <div class="card-header">
                        <div class="row ">
                            <div class="col-md-6 col-sm-12" id="card-title"><h4 class="card-title w-100 text-lg-left text-xl-left text-md-left text-sm-center"><i class="fad fa-layer-group fa-lg"></i> @Resource.MatGrouping</h4></div>
                            <div class="col-md-6 col-sm-12" id="card-buttons-@ViewBag.EntityName">
                                <a class="btn btn-sm btn-light float-left mr-1" href="#" onclick="crudAction('@ViewBag.EntityName', '@ViewBag.EntityName' + '/CrudAction', 0, '@Resource.Create @Resource.MatGroup', '');"><i class="fal fa-plus fa-md text-green" data-toggle="tooltip" data-placement="bottom" title="@Resource.Create"></i></a>
                                <a class="btn btn-sm btn-light float-left" href="#" onclick="refreshPGData()"><i class="fal fa-refresh fa-md" data-toggle="tooltip" data-placement="bottom" title="@Resource.Refresh"></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="overlay-wrapper hidden" id="overly-loading-@ViewBag.EntityName">
                            <div class="overlay flex-column"><i class="fad fa-2x fa-spinner fa-spin"></i><div class="pt-2">@Resource.Loading</div></div>
                        </div>
                        <div id="jstree-@ViewBag.EntityName">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>






<script src="~/Content/plugins/jstree/dist/jstree.js"></script>



<script type="text/javascript">
        var selectedNodeId;

        function postJsTreeOperation(operation, data, onDone, onFail) {


            $.post('@doJsPGTreeOperationUrl',
                {
                    'operation': operation,
                    'id': data.node.id,
                    'parentId': data.node.parent,
                    'position': data.position,
                    'text': data.node.text,
                    'originalId': data.original ? data.original.id : data.node.original.id,
                    'href': data.node.a_attr.href
                })
                .done(function (result) {
                    onDone(result);
                })
                .fail(function (result) {
                    alert('failed.....');
                    onFail(result);
                });
        }

        $(function () {
            var selectedData;

            $('#jstree-@ViewBag.EntityName').jstree({
                "plugins": ["contextmenu", "dnd", "types", "sort", "theme"],
                "core": {
                    "multiple": false,
                    "check_callback": true,
                    'data': {
                        'url': '@getPGTreeJsonUrl',
                        "type": "POST",
                        "dataType": "json",
                        "contentType": "application/json; charset=utf8",
                        'data': function (node) {
                            return { 'id': node.id };
                        }
                    },
                    'themes': {
                        'variant': 'large',
                        'icons':false,
                        'stripes': false
                    },

                },

                "contextmenu": {
                    "items": function ($node) {
                        var tree = $("#jstree-@ViewBag.EntityName").jstree(true);
                        return {
                            "Edit": {
                                "separator_before": false,
                                "separator_after": true,
                                "label": "ویرایش",
                                "icon": "fad fa-edit",
                                "action": function (obj) {
                                    crudAction('@ViewBag.EntityName', '@ViewBag.EntityName' + '/CrudAction', $node.id, '@Resource.Edit @Resource.MatGroup', 'modal-md');
                                }
                            },
                            "Create": {
                                "separator_before": false,
                                "separator_after": false,
                                "label": "ایجاد زیر شاخه",
                                "icon": "fad fa-chart-network",
                                "action": function (obj) {
                                    $node = tree.create_node($node);
                                   tree.edit($node);
                                }
                            },
                           
                            "MatGroupTechSpec": {
                                "separator_before": false,
                                "separator_after": true,
                                "label": "مشخصات فنی گروه کالا",
                                "icon": "fad fa-gear text-primary",
                                "action": function (obj) {
                                    getMatGroupTechSpec($node);
                                }
                            },
                           
                            "Remove": {
                                "separator_before": false,
                                "separator_after": false,
                                "label": "حذف",
                                "icon": "fad fa-trash-alt",
                                "action": function (obj) {
                                      var result = confirm('@Resource.AreYouSureToDeleteItem');
                                    if (result) {
                                        tree.delete_node($node);
                                    }
                                },

                        },
                    };
                    }
                }
            })
                .bind("loaded.jstree", function (event, data) {
                    $(this).jstree("close_all");
                })
                .on('delete_node.jstree', function (e, data) {
                    postJsTreeOperation('DeleteNode', data,
                        function (result) {
                            if (result.message == 'ok') {
                                data.instance.refresh();
                            }
                            else {
                                toastr.error(result.message);
                                data.instance.refresh();
                                return;
                            }
                        },
                        function (result) {


                        });
                })
                .on('create_node.jstree', function (e, data) {
                    postJsTreeOperation('CreateNode', data,
                        function (result) {
                            data.instance.set_id(data.node, result.id);
                        },
                        function (result) {
                            data.instance.refresh();
                        });
                })
                .on('rename_node.jstree', function (e, data) {
                    postJsTreeOperation('RenameNode', data,
                        function (result) {
                            // $("#txtTitle").val(data.node.text);
                        },
                        function (result) {
                            data.instance.refresh();
                        });

                })
                .on('move_node.jstree', function (e, data) {
                    postJsTreeOperation('MoveNode', data,
                        function (result) {
                            if (result.message == 'ok') {
                                data.instance.refresh();
                            }
                            else {
                                toastr.error(result.message);
                                data.instance.refresh();
                                return;
                            }
                        });
                });

        });

    function refreshPGData() { $('#jstree-@ViewBag.EntityName').jstree(true).refresh(); }
    function copyMatGroupUrlLink(id) {
        var $temp = $("<input>");
        $("body").append($temp);
        $temp.val('/Mat/Category/' + id).select();
        document.execCommand("copy");
        $temp.remove();
        toastr.info('.آدرس پیوند گزینه مورد نظر، در حافظه کپی شد.')
    }



function getMatGroupTechSpec(obj) {
            createChildTab('@Resource.TechSpecs' + ' - ' + obj.text, '/MatGroupTechSpec/Index/' + obj.id, 'matGroupTechSpec-' + obj.id, 'true', 'false');
};

    
</script>

