@using BSG.ADInventory.Resources
@model BSG.ADInventory.Models.InvDoc.ExternalBOLDocDataModel
@{ ViewBag.EntityName = "ExternalBOL";}
<form id="partialForm">

    <div class="row">
        <div class="col-md-3">
            @Html.HiddenFor(model => model.InvDocTypeId)
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.InvDocStatus)
            <div class="editor-label-field col-md-12">
                <div class="requiredlable">
                    @this.Html.Label(Resource.Source, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.ProjectId, (SelectList)this.ViewBag.ProjectIds, new { @class = "form-control" })
                    @this.Html.ValidationMessageFor(model => model.ProjectId)
                </div>
            </div>


            <div class="editor-label-field col-md-12">
                <div class="requiredlable">
                    @this.Html.Label(Resource.Destination, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.ProviderId, (SelectList)this.ViewBag.ProviderIds, Resource.Select, new { @class = "form-control select2" })
                    @this.Html.ValidationMessageFor(model => model.ProviderId)
                </div>
            </div>
            <div class="editor-label-field col-md-12 mt-3">
                <div class="requiredlable">
                    @this.Html.LabelFor(model => model.PurchaseDocId)
                </div>
                <div class="editor-field">
                    @this.Html.EditorFor(model => model.PurchaseDocId, new { htmlAttributes = new { @class = "form-control" } })
                    @this.Html.ValidationMessageFor(model => model.PurchaseDocId)
                </div>
            </div>
            <div class="editor-label-field col-md-12">
                <div class="requiredlable">
                    @this.Html.LabelFor(model => model.CarId, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.CarId, (SelectList)this.ViewBag.CarIds, Resource.Select, new { @class = "form-control select2", @onchange = "javascript:SetCarSelectUI(this.value);" })
                    @this.Html.ValidationMessageFor(model => model.CarId)
                </div>
            </div>
            <div id="carDataBox">
                <div class="editor-label-field col-md-12">
                    <div class="requiredlable">
                        @this.Html.LabelFor(model => model.CarTypeId, new { @class = "required" })
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.CarTypeId, (SelectList)this.ViewBag.CarTypeIds, Resource.Select, new { @class = "form-control select2" })
                        @this.Html.ValidationMessageFor(model => model.CarTypeId)
                    </div>
                </div>
                <div class="editor-label-field col-md-12 mt-2">
                    <div class="editor-label-field col-md-12 plate-logo">
                        <div class="editor-field">
                            <div class="row">
                                <div class="col-md-2 plate-part-box series-number">
                                    <p><b>ایـران</b></p>
                                    @Html.EditorFor(model => model.PlateSeries, new { htmlAttributes = new { @class = "form-control", @placeholder = "_ _", @style = "" } })
                                </div>

                                <div class="col-md-3 plate-part-box">
                                    @Html.EditorFor(model => model.PlateNumberPart2, new { htmlAttributes = new { @class = "form-control", @placeholder = "_ _ _", @style = "" } })
                                </div>
                                <div class="col-md-3 plate-part-box">
                                    @Html.DropDownListFor(model => model.PlateCharacterId, (SelectList)this.ViewBag.PlateCharacterIds, "...", new { @class = "form-control" })
                                </div>
                                <div class="col-md-2 plate-part-box">
                                    @Html.EditorFor(model => model.PlateNumberPart1, new { htmlAttributes = new { @class = "form-control", @placeholder = "_ _", @style = "" } })
                                </div>
                                <div class="col-md-1">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="editor-label-field col-md-12 mt-3">
                <div class="requiredlable">
                    @this.Html.LabelFor(model => model.DriverName, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @this.Html.EditorFor(model => model.DriverName, new { htmlAttributes = new { @class = "form-control" } })
                    @this.Html.ValidationMessageFor(model => model.DriverName)
                </div>
            </div>
            <div class="editor-label-field col-md-12">
                <div class="requiredlable">
                    @this.Html.LabelFor(model => model.DriverPhone, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @this.Html.EditorFor(model => model.DriverPhone, new { htmlAttributes = new { @class = "form-control" } })
                    @this.Html.ValidationMessageFor(model => model.DriverPhone)
                </div>
            </div>
            <div class="editor-label-field col-md-12">
                <div class="requiredlable">
                    @this.Html.LabelFor(model => model.WeighbridgeNo)
                </div>
                <div class="editor-field">
                    @this.Html.EditorFor(model => model.WeighbridgeNo, new { htmlAttributes = new { @class = "form-control" } })
                    @this.Html.ValidationMessageFor(model => model.WeighbridgeNo)
                </div>
            </div>


            <div class="editor-label-field col-md-12 @((Model.InvDocTypeId != 3 && Model.InvDocTypeId != 4 && Model.InvDocTypeId != 5)?"hidden":"")">
                <div class="requiredlable">
                    @this.Html.Label(Resource.Reciver, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @Html.DropDownList("PeopleId", (SelectList)this.ViewBag.PeopleIds, Resource.Select, new { @class = "form-control" })
                    @this.Html.ValidationMessage("PeopleId")
                </div>
            </div>
            <div class="editor-label-field col-md-12 @((Model.InvDocTypeId != 3 && Model.InvDocTypeId != 4 && Model.InvDocTypeId != 5)?"hidden":"")">
                <div class="requiredlable">
                    @this.Html.Label(Resource.Reciver, new { @class = "required" })
                </div>
                <div class="editor-field">
                    @Html.Editor("ReciverName", new { htmlAttributes = new { @class = "form-control" } })
                    @this.Html.ValidationMessage("ReciverName")
                </div>
            </div>
            <div class="editor-label-field col-md-12">
                <div class="requiredlable">
                    @this.Html.LabelFor(model => model.Description)
                </div>
                <div class="editor-field">
                    @this.Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = 2 })
                    @this.Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="row">
                <div class="editor-label-field col-md-8">
                    <div class="requiredlable">
                        @this.Html.Label(Resource.Material, new { @class = "required" })
                    </div>
                    <div class="editor-field">
                        @Html.DropDownList("MatId", (SelectList)this.ViewBag.MaterialIds, Resource.Select, new { @class = "form-control select2" })
                        @this.Html.ValidationMessage("Mat   Id")
                    </div>
                </div>

                <div class="editor-label-field col-md-2">
                    <div class="requiredlable">
                        @this.Html.Label(Resource.BOLAmount, new { @class = "required" })
                    </div>
                    <div class="editor-field">
                        @this.Html.Editor("Amount", new { htmlAttributes = new { @class = "form-control", @type = "number", min = 0, @Value = "0" } })
                        @this.Html.ValidationMessage("Amount")
                    </div>
                </div>
                <div class="editor-label-field col-md-12 align-content-end">
                    <div class="requiredlable">

                    </div>
                    <div class="editor-field">
                        <a href="#" id="addItem" onclick="addItem()" class="btn btn-default btn-sm"><i class="fal fa-download fa-md text-green"></i> @Resource.Add @Resource.Mat</a>
                        <a href="#" id="cancelItem" onclick="clearItem()" class="btn btn-default btn-sm"><i class="fal fa-times fa-md text-red"></i> @Resource.Cancel</a>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <table id="detail-table" class="table display table-striped">
                        <thead>
                            <tr>
                                <th>@Html.DisplayName(Resource.Row)</th>
                                <th>@Html.DisplayName(Resource.MatCode)</th>
                                <th>@Html.DisplayName(Resource.MatDescription)</th>
                                <th>@Html.DisplayName(Resource.Amount)</th>
                                <th>@Html.DisplayName(Resource.MatUnit)</th>
                                <th>@Html.DisplayName(Resource.Proceedings)</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</form>

<div class="row">
    <div class="col-md-12">
        <hr />
        <button class="btn btn-default btn-sm" onclick="SaveInvDoc()"><span class="fal fa-check fa-md text-green"></span> @Resource.Save</button>
        <button type="button" class="btn btn-default btn-sm" data-dismiss="modal"><span class="fal fa-times la-md text-red"></span> @Resource.Close </button>
    </div>
</div>



<script type="text/javascript">

    var MatList = [];
    var Materials = []

    $(document).ready(function () {
        $('.select2').select2();
        $('#Amount').focusout(function () {
            if ($('#RealAmount').val() == 0) {
                $('#RealAmount').val($('#Amount').val());
            }
        });
        Materials =@Html.Raw(Json.Encode(@ViewBag.Materials));
        if ('@Model.Mats.Count()' > 0)
        {
            MatList=(@(new HtmlString(Json.Encode(Model.Mats))))
            loadInvDocDet();
        }
        if ($('#CarId').val() == '') {
            $('#carDataBox').removeClass('hidden');
        }
        else {
            $('#carDataBox').addClass('hidden');
        }
    });

    function ItemValidation() {
        var result = true;
        var matId = $('#MatId').val();

        if ($('#MatId').val() == null || $('#MatId').val() == '') {
            $('#MatId').addClass('input-validation-error');
            result = false;
        }
        else {
            $('#MatId').removeClass('input-validation-error');

            if ($('#Amount').val() == null || parseFloat($('#Amount').val()) <= 0) {
                $('#Amount').addClass('input-validation-error');
                result = false;
            }
            else {
                $('#Amount').removeClass('input-validation-error');

                //******* region check data duplicated in List
                var exists = $.grep(MatList, function (e) { return e.MatId == matId; });
                if (exists.length != 0) {

                    $('#MatId').addClass('input-validation-error');
                    toastr.error('@Resource.DuplicateData');
                    result = false;
                }
                else { $('#MatId').removeClass('input-validation-error'); }


                //******* check inventory availability if doc sign <0
                var matInvQty = 0;
                $.ajax({
                    type: "Get",
                    //data: { id: matId, projectId:$('#ProjectId').val()},
                    url: "/InvDoc/GetMatInvQty?id=" + matId + '&projectId=' + $('#ProjectId').val(),
                    async: false,
                    success: function (response) {
                        matInvQty = response;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        toastr.error(xhr.responseText);
                    }
                });


                if ($('#Amount').val() > matInvQty) {
                    toastr.error('موجودی کالا کافی نمی باشد.' + '\n' + 'حداکثر مقدار قابل تخصیص طبق موجودی انبار ' + matInvQty + ' می‌باشد.');
                    $('#Amount').addClass('input-validation-error');
                    result = false;
                }
                else {
                    $('#Amount').removeClass('input-validation-error');
                }
            }
        }
        return result;
    }

    function addItem() {

        if (!ItemValidation())
            return false;

        let result = Materials.find(({ Id }) => Id == parseInt($('#MatId').val()));
        if (result != null) {
            var mat = {
                Id: 0,
                MatId: parseInt($('#MatId').val()),
                Title: result.Title,
                MatUnit: result.MatUnit,
                Amount: parseFloat($('#Amount').val()),

            };
            MatList.push(mat);
            clearItem();
            loadInvDocDet();
        }
        };

    // Show Docdet list as table
    function loadInvDocDet() {
        $('#detail-table tbody').html('');
        $.each(MatList, function (i, item) {
            var $tr = $('<tr>').append(
                $('<td>').text(i + 1),
                $('<td>').text(item.MatId),
                $('<td>').text(item.Title),
                $('<td>').text(item.Amount),
                $('<td>').text(item.MatUnit),
                $('<td class="text-center">' + '<i class="fal fa-edit fa-lg pl-3" onclick="editItem(' + item.Id + ',' + item.MatId + ')"></i><i class="fal fa-times fa-lg text-danger" onclick="removeItem(' + item.MatId + ')"></i>'),
            ).appendTo('#detail-table');
        });
    };

    function clearItem() {
        $('#Amount').val(0);
        $('#MatId').val('').trigger('change');
    }

    function removeItem(id) {
        if (confirm('@Resource.AreYouSureToDeleteItem')) {
            MatList = MatList.filter(i => i.MatId !== id);
            loadInvDocDet();
        }
    }

    function GenerateInvDocData()
    {
        var data = {
            Id: $('#Id').val(),
            InvDocTypeId: $('#InvDocTypeId').val(),
            ProviderId: $('#ProviderId').val(),
            ProjectId: $('#ProjectId').val(),
            PurchaseDocId: $('#PurchaseDocId').val(),
            CarId: $('#CarId').val(),
            CarTypeId: $('#CarTypeId').val(),
            DriverName: $('#DriverName').val(),
            DriverPhone: $('#DriverPhone').val(),
            WeighbridgeNo: $('#WeighbridgeNo').val(),
            Description: $('#Description').val(),
            PlateSeries: $('#PlateSeries').val(),
            PlateNumberPart2: $('#PlateNumberPart2').val(),
            PlateCharacterId: $('#PlateCharacterId').val(),
            PlateNumberPart1: $('#PlateNumberPart1').val(),
            Mats: MatList
        }
        return data;
    }

    function SaveInvDoc() {
        if (!$('#partialForm').valid())
            return;

        if (MatList.length == 0) {
            toastr.error('هیچ کالایی در سند وجو ندارد');
            return;
        }

        $.ajax({
            url: "/InvDoc/SetExternalBOLDoc",
            data: GenerateInvDocData(),
                cache: false,
                type: "POST",
                beforeSend: function () {
                    $("#overly-loading-modal").removeClass("hidden");
                },
                success: function (response) {
                    if (response.Result == true) {
                        toastr.success(response.ErrorMessage);
                        $('#modal-content').modal('toggle');
                        LoadData('6');
                    }
                    else {
                        toastr.error(response.ErrorMessage);
                    }

                },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(xhr.responseText);
                //return false;
                },
            complete: function responce() {
                $("#overly-loading-modal").addClass("hidden");
            }
                });


    }

    function SetCarSelectUI(id) {
        var entity = '@ViewBag.EntityName';
        if (id != '' && id != null) {
            $.ajax({
            url: "/Car/GetCarInfo/"+id,

                cache: false,
                type: "GET",
                beforeSend: function () {
                    $("#overly-loading-"+entity).removeClass("hidden");
                },
                success: function (response) {
                    if (response.Result != null) {
                        $('#DriverName').val(response.Result.OwnerDriverName)
                        $('#DriverPhone').val(response.Result.OwnerDriverPhoneNumber)
                        $('#CarTypeId').val(response.Result.CarTypeId).trigger('change');
                        $('#PlateSeries').val(response.Result.PlateSeries)
                        $('#PlateCharacterId').val(response.Result.PlateCharacterId)
                        $('#PlateNumberPart1').val(response.Result.PlateNumberPart1)
                        $('#PlateNumberPart2').val(response.Result.PlateNumberPart2)
                        $('#carDataBox').addClass('hidden');
                    }
                    else {
                        toastr.error(response.ErrorMessage);
                    }

                },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(xhr.responseText);

                },
            complete: function responce() {
                $("#overly-loading-"+entity).addClass("hidden");
            }
                });

        }
        else {
            $('#DriverName').val('')
            $('#DriverPhone').val('')
            $('#CarTypeId').val('').trigger('change');
            $('#PlateSeries').val('')
            $('#PlateCharacterId').val('')
            $('#PlateNumberPart1').val('')
            $('#PlateNumberPart2').val('')
            $('#carDataBox').removeClass('hidden');
        }

    }

     function editItem(id, matId) {

        var objIndex = MatList.findIndex(i => i.Id == id && i.MatId == matId);

        if (objIndex != null) {
            $('#modal2-content-title').html('<i class="fad fa-check-circle fa-lg text-success"></i> ' + 'ویرایش مقادیر کالا : <b>' + MatList[objIndex].Title+'</b>');
            $('#modal2-content-body').html(
                '<div class="row">'+
                '<div class="editor-label-field col-md-12">' +
                '<div class= "requiredlable">' +
                '<label for="InvDocAmount">مقدار</label>' +
                '</div>' +
                '<div class="editor-field">' +
                '<input class="form-control text-box single-line" data-val="true"  id="InvDocAmount" name="InvDocAmount" type="number" value="' + MatList[objIndex].Amount + '">' +
                '<span class="field-validation-valid" data-valmsg-for="Title" data-valmsg-replace="true"></span>' +
                '</div>' +
                '</div>'

            );
            $('#modal2-footer').removeClass('hidden');
            $('#modalBtnOk2').removeClass('hidden');
            $('#modalBtnCancel2').removeClass('hidden');
            $('#modal2-content .modal-dialog').addClass('modal-sm');
            $('.select2').select2();
            $('#modal2-content').modal('toggle');

            $('#modal2-content').on('shown.bs.modal', function (e) {
                $('#modalBtnOk2').click(function () {
                    if (confirm('@Resource.AreYouSureToEditItem')) {
                        if ($('#InvDocAmount').val() <= 0 || $('#InvDocAmount').val() <= 0) {
                            toastr.error('مقدار وارد شده صحیح نیست');
                            return;
                        }

                        var matInvQty = 0;
                        $.ajax({
                            type: "Get",
                            //data: { id: matId, projectId:$('#ProjectId').val()},
                            url: "/InvDoc/GetMatInvQty?id=" + matId + '&projectId=' + $('#ProjectId').val(),
                            async: false,
                            success: function (response) {
                                matInvQty = response;
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                toastr.error(xhr.responseText);
                            }
                        });

                        if ($('#modal2-content #InvDocAmount').val() > matInvQty) {
                            toastr.error('موجودی کالا کافی نمی باشد.' + '\n' + 'حداکثر مقدار قابل تخصیص طبق موجودی انبار "' + matInvQty + '" می‌باشد.');
                            return;
                        }


                        MatList[objIndex].Amount = $('#modal2-content #InvDocAmount').val();
                        loadInvDocDet();
                        $('#modal2-content').modal('toggle');
                        $(this).off('click');
                    }
                });
                $('#modalBtnCancel2').click(function () {
                    $('#modalBtnOk2').off('click');
                });

                $(this).off('shown.bs.modal');

            });

        }
    }
</script>



