@model BSG.ADInventory.Models.Mat.MatCEDTO
@using BSG.ADInventory.Resources
@using BSG.ADInventory.Common.Enum
@{ViewBag.EntityName = "Mat";}
@{
    var doJsTreeOperationUrl = Url.Action(actionName: "DoJsTreeOperation", controllerName: "MatGroup");
    var getTreeJsonUrl = Url.Action(actionName: "GetTreeJson", controllerName: "MatGroup");
}
<link href="~/Content/plugins/jstree/dist/themes/default/style.css" rel="stylesheet" />

@if (ViewBag.Result == true)
{
    <script>

        //$('#modal-content').one('shown.bs.modal', function () {
        //    console.log("Modal has been toggled once.");
        //}).modal('toggle');
        $('#modal-content').modal('toggle');
                toastr.success('@Resource.DataSavedSuccessfully');
                $('#data-table-' + '@ViewBag.EntityName').dataTable().api().ajax.reload(null, false);
    </script>
}
else
{
    <div class="form-group">
        <div class="row">
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-3">
                        @Html.HiddenFor(model => model.Id)
                        <div class="editor-label-field col-md-12 ">
                            <div class="requiredlable">
                                @Html.LabelFor(model => model.MatGroupId, new { @class = "required" })
                            </div>
                            <div class="editor-label-field">
                                <div id="jstree-MatGroups" class="table-responsive" style="max-height:450px">
                                </div>
                                <div style="position:relative; z-index:-1000">
                                    @Html.DropDownListFor(model => model.MatGroupId, (SelectList)this.ViewBag.MatGroupIds, Resource.Select, new { @class = "" })
                                </div>
                                @Html.ValidationMessageFor(model => model.MatGroupId)
                            </div>
                        </div>

                    </div>
                    <div class="col-md-9">
                        <div class="row">
                            <div class="editor-label-field col-md-12 text-center p-3">
                                <div class="border-1 border-dashed border-gray rounded-5 p-2">
                                    <div class="requiredlable">
                                        @this.Html.LabelFor(model => model.ImageUrl)
                                    </div>
                                    <div class="editor-field">
                                        @this.Html.EditorFor(model => model.ImageUrl, new { HtmlAttributes = new { @class = "form-control" } })
                                        @this.Html.ValidationMessageFor(model => model.ImageUrl)
                                    </div>
                                    <p class="text-primary text-center pt-2"><i class="fad fa-bell-on fa-shake fa-lg"></i> جهت نمایش بهتر تصویر ، آن را با اندازه <b> @ViewBag.PictureSize </b> پیکسل یا به تناسب آن ، بارگذاری نمائید.</p>
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.Code)
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.Code, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.Code)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.Title, new { @class = "required" })
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.Title, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.Title)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.MatUnitId, new { @class = "required" })
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.MatUnitId, (SelectList)this.ViewBag.MatUnitIds, Resource.Select, new { @class = "select2 form-control" })
                                    @this.Html.ValidationMessageFor(model => model.MatUnitId)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.BrandId)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.BrandId, (SelectList)this.ViewBag.BrandIds, Resource.Select, new { @class = "select2 form-control" })
                                    @this.Html.ValidationMessageFor(model => model.BrandId)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.Model)
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.Model, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.Model)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.Dimention)
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.Dimention, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.Dimention)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.TechnicalSpec)
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.TechnicalSpec, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.TechnicalSpec)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.OrderPoint, new { @class = "required" })
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.OrderPoint, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.OrderPoint)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.MinimumInventory, new { @class = "required" })
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.MinimumInventory, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.MinimumInventory)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.MatAllocationType, new { @class = "required" })
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.MatAllocationType, EnumHelper.GetSelectList(typeof(MatAllocationType)), new { @class = "form-control" })
                                    @this.Html.ValidationMessageFor(model => model.MatAllocationType)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.MatStorageMethod)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.MatStorageMethod, EnumHelper.GetSelectList(typeof(MatStorageMethod)), Resource.Select, new { @class = "form-control" })
                                    @this.Html.ValidationMessageFor(model => model.MatStorageMethod)
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.HasExpirationDate)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.HasExpirationDate, new List<SelectListItem>()
                                    {
                                       new SelectListItem() { Text = Resource.Yes, Value = "True" },
                                       new SelectListItem() { Text = Resource.No, Value = "False"}
                                    }, new { @id = "HasExpirationDate", @class = "form-control" })
                                </div>
                            </div>
                            <div class="editor-label-field col-md-3">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.IsActive)
                                </div>
                                <div class="editor-field">
                                    @Html.DropDownListFor(model => model.IsActive, new List<SelectListItem>()
                                    {
                                       new SelectListItem() { Text = Resource.Active, Value = "True" },
                                       new SelectListItem() { Text = Resource.InActive, Value = "False"}
                                    }, new { @id = "IsActive", @class = "form-control" })
                                </div>
                            </div>
                            <div class="editor-label-field col-md-9">
                                <div class="requiredlable">
                                    @this.Html.LabelFor(model => model.Description)
                                </div>
                                <div class="editor-field">
                                    @this.Html.EditorFor(model => model.Description, new { HtmlAttributes = new { @class = "form-control" } })
                                    @this.Html.ValidationMessageFor(model => model.Description)
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <hr />
                <button type="submit" class="btn btn-default btn-sm"><span class="fal fa-check fa-md text-green"></span> @Resource.Save</button>
                <button type="button" class="btn btn-default btn-sm" data-dismiss="modal"><span class="fal fa-times la-md text-red"></span> @Resource.Close </button>
            </div>
        </div>
    </div>
}

<script src="~/Content/plugins/jstree/dist/jstree.js"></script>

<script>
$(function () {
    var selectedData;
    $('#jstree-MatGroups').jstree({
        "core": {
            "multiple": false,
            "check_callback": true,
            'data': {
                'url': '@getTreeJsonUrl',
                "type": "POST",
                "dataType": "json",
                "contentType": "application/json; charset=utf8",
                'data': function (node) {
                    return { 'id': node.id };
                }
            },
            'themes': {
                'variant': 'large',
                'stripes': false,
                'draggable': false
            }
        },

        "plugins": ["types", "sort"]
    })
    .bind("loaded.jstree", function (event, data) {
        if (@ViewBag.MatGroupId == 0) {
            $(this).jstree("close_all");
            $('#MatGroupTitle').html('دسته بندی ابزار/تجهیز را انتخاب نمائید ...')
        } else {
            $('li[id="@ViewBag.MatGroupId"] > a.jstree-anchor').addClass('jstree-clicked');
            $('#MatGroupTitle').html($('li[id="@ViewBag.MatGroupId"] > a.jstree-anchor').text());
        }
    })
    .on('deselect_node.jstree', function (e, data) {
        $('#MatGroupTitle').html('دسته بندی محتوا را انتخاب نمائید ...')
    })
    .on('select_node.jstree', function (e, data) {
        if (data.node.children !== '') {
            toastr.error('مجاز به انتخاب این گزینه نمی باشید. لطفا از گزینه‌های زیر مجموعه انتخاب نمائید.');
            data.instance.deselect_node(data.node);
            return;
        }
        $('#MatGroupTitle').html(data.node.text);
        $("#MatGroupId option[value='" + data.node.id + "']").attr("selected", "selected");
        selectedData = data;
    })
    .on('loaded.jstree', function () {
        var matGroupId = '@ViewBag.MatGroupId'; // Get the MatGroupId from the server

        if (matGroupId) {
            // Function to open all parents of a specific node
            function openParents(nodeId) {
                return new Promise((resolve) => {
                    var node = $('#jstree-MatGroups').jstree('get_node', nodeId);
                    if (node && node.parent !== '#') {
                        // Open the parent node recursively
                        $('#jstree-MatGroups').jstree('open_node', node.parent, function () {
                            openParents(node.parent).then(resolve);
                        });
                    } else {
                        // Resolve when all parents are opened
                        resolve();
                    }
                });
            }

            // Start opening parents from the selected node
            openParents(matGroupId).then(function () {
                // Once all parents are opened, scroll to the node
                setTimeout(function() {
                    scrollToNode(matGroupId);
                }, 100); // Add a slight delay to ensure rendering
            });
        }
    });

    // Function to scroll to the node
    function scrollToNode(nodeId) {
        var nodeElement = $('#jstree-MatGroups').jstree('get_node', nodeId, true);
        if (nodeElement && nodeElement.length) {
            var container = $('#jstree-MatGroups');
            var offsetTop = nodeElement.offset().top - container.offset().top + container.scrollTop();
            container.animate({ scrollTop: offsetTop }, 450, function() {
                console.log("Scroll animation completed.");
            });
        } else {
            console.warn('Node does not exist:', nodeId);
        }
    }
});

</script>