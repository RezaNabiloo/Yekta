@using BSG.ADInventory.Resources
@{ViewBag.EntityName = "PurchaseDoc";}
<section class="content" style="padding-top:10px;">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="overlay-wrapper hidden" id="overly-loading-@ViewBag.EntityName">
                    <div class="overlay flex-column"><i class="fad fa-2x fa-spinner fa-spin"></i><div class="pt-2">@Resource.Loading</div></div>
                </div>
                <div class="card card-default">
                    <div class="card-header">
                        <div class="row ">
                            <div class="col-md-3" id="card-title"><h4 class="card-title float-right"><i class="fad fa-folder-open fa-lg"></i> @Resource.PurchaseDocsOf @Resource.Open</h4></div>
                            <div class="col-md-9" id="card-buttons-@ViewBag.EntityName">
                            </div>
                        </div>
                    </div>
                    <div class="card-body" style="overflow-x:hidden">
                        <table id="data-table-@ViewBag.EntityName" class="display nowrap table-hover table-striped">
                            <thead>
                                <tr>
                                    <th class="table-col-sm">@Resource.Proceedings</th>
                                    <th class="table-col-sm">@Html.DisplayName(Resource.Id)</th>
                                    <th>@Html.DisplayName(Resource.Attachment)</th>
                                    <th>@Html.DisplayName(Resource.Provider)</th>
                                    <th>@Html.DisplayName(Resource.Aggregated)</th>
                                    <th>@Html.DisplayName(Resource.CreateUser)</th>
                                    <th>@Html.DisplayName(Resource.CreateTime)</th>
                                    <th>@Html.DisplayName(Resource.Details)</th>
                                </tr>
                            </thead>

                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<script type="text/javascript">

      $(document).ready(function () {
        var entity = '@ViewBag.EntityName';

        $('#data-table-' + entity + ' thead tr')
            .clone(true)
            .addClass('filters')
            .appendTo('#data-table-' + entity + ' thead');

        table = $('#data-table-' + entity).DataTable({
            orderCellsTop: true,
            fixedHeader: true,
            scrollX: true,
            response: true,
            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "همه"]],
            dom: 'lfBrtip',
            buttons: [
                { extend: 'copy', exportOptions: { columns: ':visible' } },
                { extend: 'excel', exportOptions: {columns: ':visible' } },
                { extend: 'pdf', exportOptions: { columns: ':visible' } },
                {
                    extend: 'print',
                    exportOptions: { columns: ':visible' },
                    title: '<div><h3 class="text-center">@Resource.List @Resource.Townships</h3></div>',
                },
                'colvis',
                {
                    text: '<i class="fal fa-refresh fa-md"></i> @Resource.Refresh',
                    action: function (e, dt, node, config) {
                        $('#data-table-' + entity).dataTable().api().ajax.reload();
                    }
                },
                {
                    text: '<i class="fas fa-plus fa-md text-green"></i> @Resource.Create',
                    action: function (e, dt, node, config) {
                        crudActionLocal(0, '@Resource.Create', 'modal-xl')
                    }
                },

            ],
            retrieve: true,
            Response: true,
            order: [0, 'asc'],
            bProcessing: true,
            language: { url: '/Content/plugins/datatables/fa.json' },
            bFilter: true,
            bServerSide: true,
            sAjaxSource: '/' + entity + '/GetDataList?type=1',
            fnCreatedRow: function (nRow, aData, iDataIndex) {$(nRow).attr('id', 'row-' + entity + '-' + aData['Id']);},
             aoColumns: [
                {
                    data: 'Id',
                    render: function (data, type, full, meta) {
                        return '<div class="btn-group show  table-action-menu">' +
                            '<button type="button" class="btn btn-default dropdown-toggle text-center" data-toggle="dropdown" aria-expanded="true">' +
                            '<span class="fas fa-ellipsis-h fa-sm text-black-50"></span>' +
                            '</button>' +                            
                            '<div class="dropdown-menu" role="menu">' +
                            '<a class="dropdown-item" href="#" onclick="crudActionLocal(' + data + ',\'@Resource.Edit @Resource.PurchaseDoc\',\'modal-xl\')"><i class="fal fa-edit fa-md"></i> @Resource.Edit/@Resource.Details</a>' +
                            '<a class="dropdown-item" href="#" onclick="Print(' + data + ')"><i class="fal fa-print fa-md"></i> @Resource.Print</a>' +
                            '<a class="dropdown-item" href="#" onclick="uploadFile(' + data + ',\'' + entity + '\')"><i class="fal fa-paperclip fa-md"></i> @Resource.UploadedFile</a>' +                            
                            '<a class="dropdown-item" href="#" onclick="DeleteItem(' + data + ',\'' + entity + '\',\'' + entity + '\',\''+entity+'\')"><i class="fal fa-trash-alt fa-md"></i> @Resource.Delete</a>' +
                            '</div>' +
                            '</div>'
                    }
                    , class: 'action-col'
                },
                 { data: 'Id' },
                 {
                     data: 'Attachments',
                     render: function (data, type, row, meta) {
                         return data > 0 ? '<i class="fas fa-paperclip fa-lg text-blue" onclick="showAttachments(' + row.Id + ')"></i> ' + data : '';
                     }
                 },
                 { data: 'Provider' },
                 {
                     data: 'IsAggregated',
                     render: function (data, type, row, meta) {
                         return data == true ? '<i class="fas fa-circle-check fa-lg text-success"></i>' : '<i class="fas fa-circle-xmark fa-lg text-danger"></i>';
                     }
},
                { data: 'CreateUser' },
                 {
                     data: 'CreateTime',
                     className: 'readonly not-allowed',
                     render: function (data, type, full) {
                         if (data != null) {
                             var dtStart = new Date(parseInt(data.substr(6)));
                             return dtStart.toLocaleDateString('fa-IR');
                         } else {
                             return "";
                         }
                     }
                 },
                { data: 'Details' },

            ],
            columnDefs: [
                { "width": "50px", "targets": 0 },
                { "width": "50px", "targets": 1 },
                { "width": "80px", "targets": 2 },
                { "width": "80px", "targets": 4 }
            ],
            initComplete: function () {

                var api = this.api();
                // For each column
                api
                    .columns()
                    .eq(0)
                    .each(function (colIdx) {
                        // Set the header cell to contain the input element
                        var cell = $('#data-table-' + entity + '_wrapper .filters th').eq(
                            $(api.column(colIdx).header()).index()
                        );
                        var title = $(cell).text();
                        $(cell).html('<input type="text" class="form-control" placeholder=" " />');

                        // On every keypress in this input
                        $(
                            'input',
                            $('#data-table-' + entity + '_wrapper .filters th').eq($(api.column(colIdx).header()).index())
                        )
                            .off('keyup change')
                            .on('change', function (e) {
                                // Get the search value
                                $(this).attr('title', $(this).val());
                                var regexr = '({search})'; //$(this).parents('th').find('select').val();
                                var cursorPosition = this.selectionStart;
                                // Search the column for that value
                                api
                                    .column(colIdx)
                                    .search(
                                        this.value != ''
                                            //? regexr.replace('{search}', '(((' + this.value + ')))')
                                            ? regexr.replace('{search}', this.value).replace('(', '').replace(')', '')
                                            : '',
                                        this.value != '',
                                        this.value == ''
                                    )
                                    .draw();
                            })
                            .on('keydown', function (e) {
                                if (e.key == '13') {
                                    e.stopPropagation();

                                    $(this).trigger('change');
                                    $(this)
                                        .focus()[0]
                                        .setSelectionRange(cursorPosition, cursorPosition);
                                }

                            });
                    });


                $('#data-table-' + entity + '_wrapper > .dt-buttons').appendTo('div.card-header #card-buttons-' + entity);
                $('.dt-buttons').addClass('float-left dt-buttons-show');
                $('.dt-buttons button').addClass('btn btn-sm btn-light');
                $('#data-table-' + entity + '_wrapper tr.filters').fadeIn(1000);
                table.columns.adjust();
            },
        });

      });

    function crudActionLocal(id, title, modalSize) {

        $.ajax({
            cache: false,
            type: 'GET',
            url: 'PurchaseDoc/CrudAction?id=' + id,
            dataType: "html",
            beforeSend: function () {
                $("#overly-loading-@ViewBag.EntityName").removeClass("hidden");
            },
            success: function (data) {
                $('#modal-content-title').html('<i class="fad fa-rectangle-history-circle-plus fa-lg"></i> ' + title);
                $('#modal-content-body').html(data);
                if (modalSize != '') {
                    $('#modal-content .modal-dialog').addClass(modalSize);
                }
                $('#modal-content').modal('toggle');
            },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(thrownError)
            },
            complete: function responce() {
                $("#overly-loading-@ViewBag.EntityName").addClass("hidden");
                if ($.validator.unobtrusive != undefined) {
                    $.validator.unobtrusive.parse("#partialForm");
                }
                else { toastr.error('Form validator not found.') }
            }
        });
    }

    function uploadFile(id, entity) {
        $.ajax({
            type: 'GET',
            url: '/PurchaseDocAttachment/GetPurchaseDocAttachmentFile/',
            data: { purchaseDocId: id},
            dataType: "html",
            beforeSend: function () {
                $("#overly-loading-@ViewBag.EntityName").removeClass("hidden");
            },
            success: function (data) {
                $('#modal-content-title').html('<i class="fad fa-rectangle-history-circle-plus fa-lg"></i> ' + 'بارگذاری فایل');
                $('#modal-content-body').html(data);
                $('#modal-content').modal('toggle');

            },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(thrownError)
            },
            complete: function responce() {
                $("#overly-loading-@ViewBag.EntityName").addClass("hidden");
            }
        });
    }

    function showAttachments(id) {
        $.ajax({
            cache: false,
            type: 'GET',
            url: '/PurchaseDocAttachment/GetAttachments?id=' + id,
            dataType: "html",
            beforeSend: function () {
                $("#overly-loading-desktop").removeClass("hidden");
            },
            success: function (data) {
                $('#modal-content-title').html('<i class="fad fa-paperclip fa-lg"></i> ' + 'لیست پیوست‌ها');
                $('#modal-content-body').html(data);
                $('#modal-footer').removeClass('hidden');
                $('#modalBtnCancel').removeClass('hidden');
                $('#modal-content').modal('toggle');

            },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(thrownError)
            },
            complete: function responce() {
                $("#overly-loading-desktop").addClass("hidden");
            }
        });
    }

    function downloadFile(id) {
        $.ajax({
            cache: false,
            type: 'GET',
            url: '/PurchaseDocAttachment/GetAttachments?id=' + id,
            dataType: "html",
            beforeSend: function () {
                $("#overly-loading-modal").removeClass("hidden");
            },
            success: function (response) {
                var blob = new Blob([response], { type: 'application/ms-excel;' });
                var downloadUrl = URL.createObjectURL(blob);
                var a = document.createElement("a");
                a.href = downloadUrl;
                a.download = "";
                document.body.appendChild(a);
                a.click();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(thrownError)
            },
            complete: function responce() {
                $("#overly-loading-modal").addClass("hidden");
            }
        });
    }

    function Print(id) {
        $.ajax({
            cache: false,
            type: "GET",
            url: "/Report/PrintPurchaseDoc?id=" + id,
            dataType: "html",
            beforeSend: function () {
                $("#overly-loading-desktop").removeClass("hidden");
            },
            success: function (data) {
                $('#modal-content-title').html('<i class="fad fa-print fa-lg"></i> چاپ سند');
                $('#modal-content-body').html(data);

                $('#modalBtnCancel').removeClass('hidden');

                $('#modal-content .modal-dialog').addClass('modal-xl');
                $('#modal-content').modal('toggle');
                //$(function () {
                //    $('#modalBtnPrint').unbind('click').bind('click', function (e) {
                //        SaveInvDoc();
                //    });
                //});

            },
            error: function (xhr, ajaxOptions, thrownError) {
                toastr.error(thrownError)
            },
            complete: function responce() {
                $("#overly-loading-desktop").addClass("hidden");
            }

        });

    }


</script>
