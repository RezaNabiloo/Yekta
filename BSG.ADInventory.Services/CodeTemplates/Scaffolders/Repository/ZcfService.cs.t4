<#@ template debug="true" language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
namespace <#= Model.RepositoryNamespace #>
{ 	
    using BSG.ADInventory.Entities;
    using Zcf.Data;
    using Zcf.Data.Extensions;
    using Zcf.Paging;
    using Zcf.Services;
	<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.RepositoryNamespace)).Distinct()) { #>
using <#= ns #>;
	<# } #>
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
	var modelname = modelType.Name.ToString().ToLower();
    var modelNamePlural = Model.ModelTypePluralized; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);    
#>	  
    /// <summary>
    /// Create Service For <#= modelname #>" />
    /// </summary>
    public class <#= modelName #>Service : CrudService<<#= modelName #>>, I<#= modelName #>Service
    {
        private readonly BSG.ADInventory.Data.I<#= modelName #>Repository <#= modelname #>Repository;

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= modelName #>Service" /> class.
        /// </summary>
        /// <param name="unitOfWork">The unit of work.</param>
        /// <param name="<#= modelname #>Repository"></param>
        public <#= modelName #>Service(IUnitOfWork unitOfWork, BSG.ADInventory.Data.I<#= modelName #>Repository <#= modelname #>Repository)
            : base(unitOfWork, <#= modelname #>Repository)
        {
            this.<#= modelname #>Repository = <#= modelname #>Repository;
        }

        /// <summary>
        /// Gets an <see cref="IPagedQueryable" /> instance according to the specified criteria.
        /// </summary>
        /// <param name="criteria"></param>
        /// <returns></returns>
        public override IPagedQueryable<<#= modelName #>> GetItems(PagedQueryable criteria)
        {
            var data = this.<#= modelname #>Repository.Query;
            return data.ToPagedQueryable(criteria);
        }
    }
}
